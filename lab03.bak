#lang racket
#| Hayun Jung |#

;easy lambdas
(define (func1 x) [+ (* x x) 2])
(define func2 [λ (x) [+ (* x x) 2]])
(define dec (λ (x) [- x 1]))

(define operate (λ (f) [λ (a b) (cons [f a] [f b])]))
(define times3 [operate (λ (x) [* 3 x])])

(define [evens list (newlist '())]
  [cond
    ((empty? list)
     [reverse newlist])
    [else
     [cond
     ((equal? [modulo (car list) 2] 0)
      (evens [cdr list] [cons #t newlist]))
     (else
      (evens [cdr list] [cons #f newlist]))]]])

(define [listTimes4 list (newlist '())]
  [cond
    ((empty? list)
     [reverse newlist])
    [else
     (listTimes4  (cdr list) [cons [* (car list) 4] newlist])]])
  
;tests
(displayln "(func1 5) -> 27")
(func1 5)
(displayln "(func1 0) -> 2")
(func1 0)
(displayln "(func1 -1) -> 3")
(func1 -1)
(displayln "")

(displayln "(func2 5) -> 27")
(func2 5)
(displayln "(func2 0) -> 2")
(func2 0)
(displayln "(func2 -1) -> 3")
(func2 -1)
(displayln "")

(displayln "(times3 7 15) -> '(21 . 45)")
(times3 7 15)
(displayln "(times3 0 4) -> '(0 . 12)")
(times3 0 4)
(displayln "(times -1 5) -> '(-3 . 15)")
(times3 -1 5)
(displayln "")

(displayln "(evens '(4 6 7)) -> '(#t #t #f)")
(evens '(4 6 7))
(displayln "(evens '(-1 0 -6)) -> '(#f #t #t)")
(evens '(-1 0 -6))
(displayln "(evens '()) -> '()")
(evens '())

(displayln "(listTimes4 '(1 2 3)) -> '(4 8 12)")
(listTimes4 '(1 2 3))
(displayln "(listTimes4 '(-1 0 -3)) -> '(-4 0 -12)")
(listTimes4 '(-1 0 -3))


  
  