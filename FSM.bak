#lang racket
#|Hayun Jung |#

(define (DFA input Sigma S s0 delta F)
  (define (DFA_runner input Sigma S s0 delta F)
    (define (final_checker s0 F)
      [cond
        ((null? F)
         #f)
        ((equal? (car F) s0)
         #t)
        (else
         (final_checker s0 (cdr F)))])

    (define (transition_checker element s0 delta)
      [cond
        ((null? delta)
         s0)
        [(equal? (car(car delta)) s0)
         [cond
           ((equal? (car(cdr(car delta))) (string element))
            (car(cdr (cdr (car delta)))))
           (else
            (transition_checker element s0 (cdr delta)))]]
        (else
         (transition_checker element s0 (cdr delta)))])
    
    [cond
      [(null? input)
       [cond
         ((final_checker s0 F)
          #t)
         (else
          #f)]]
      [else
       (DFA_runner (cdr input) Sigma S (transition_checker (car input) s0 delta) delta F)]])
  
   (DFA_runner (string->list input) Sigma S s0 delta F))

(define (NFA input Sigma Q q0 Delta F)
  (define (NFA_runner (string->list input) Sigma S s0 delta F)


;Test Cases
(displayln "(DFA \"0101\" '(\"1\" \"0\") '(q0 q1) 'q0 '((q0 \"0\" q0) (q0 \"1\" q1) (q1 \"0\" q1) (q1 \"1\" q1)) '(q1)) -> #t")
(DFA "0101" '("1" "0") '(q0 q1) 'q0 '((q0 "0" q0) (q0 "1" q1) (q1 "0" q1) (q1 "1" q1)) '(q1))