#lang racket
(define (y-intercept m b)
  b
  )
(define (x-intercept m b)
  (/ (* -1 b) m)
  )
(define (triangle-area m b)
  (abs (/ (*(y-intercept m b) (x-intercept m b)) 2))
  )
(define (modadd low high current addnum)
   (+ (modulo (+ current addnum (- low)) (- high low -1)) low)
  )

(define (modsub low high current subnum)
   (+ (modulo (- current subnum (+ low)) (+ high low +1)) low)
  )

(define (addtime time mins)
  (+ (* (correctformatt time mins)100) (addmins time mins))
  )
(define (gethours time)
  (floor (/ time 100))
  )
(define (getmin time)
  (modulo time 100)
  )
 (define (determine time mins)
   (floor (/ (+ (getmin time) mins) 60)) 
   )
 (define (addhours time mins)
   (modulo (+ (gethours time) (determine time mins)) 12)
   )
 (define (addmins time mins)
   (modulo (+ (getmin time) mins) 60)
   )
 (define (correctformatt time mins)
   (modadd 1 12 12 (modulo (addhours time mins) 12))
   )

; Tests for imaginary - function:
(display "(y-intercept 0 3) -> 3):")
(y-intercept 0 3)
(display "(y-intercept 0 0) -> 0):")
(y-intercept 0 0)

(display "(x-intercept -1 1) -> 1):")
(x-intercept -1 1)
(display "(x-intercept 1 10) -> 0):")
(x-intercept 1 0)

(display "(triangle-area 3 4) -> 2+2/3):")
(triangle-area 3 4)
(display "(triangle-area -2 1) -> 1/4):")
(triangle-area -2 1)

(display "(modadd 5 8 7 0) -> 7):")
(modadd 5 8 7 0)
(display "(modadd 5 8 7 -1) -> 6):")
(modadd 5 8 7 -1)

(display "(modsub 1 4 4 3) -> 1):")
(modsub 1 4 4 3)
(display "(modsub 1 4 3 -1) -> 4):")
(modsub 1 4 3 -1)

(display "(addtime 1230 240) -> 430):")
(addtime 1230 240)
(display "(addtime 1230 0) -> 1230):")
(addtime 1230 0)
